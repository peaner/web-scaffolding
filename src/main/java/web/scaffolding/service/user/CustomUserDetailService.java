package web.scaffolding.service.user;import com.google.common.collect.Sets;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.stereotype.Service;import web.scaffolding.dao.UserRepository;import web.scaffolding.domain.User;import web.scaffolding.core.utils.GsonUtils;import java.util.Set;@Service@Slf4jpublic class CustomUserDetailService implements UserDetailsService {    @Autowired    private UserRepository userRepository;    @Override    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {        User user = userRepository.findTopByUsernameOrderByIdDesc(username);        log.info("user {} login query: {}", username, GsonUtils.toJson(user));        if (user == null) {            throw new UsernameNotFoundException("username: " + username + " not found !");        }        CustomUserDetail customUserDetail = new CustomUserDetail();        customUserDetail.setUserId(user.getId());        customUserDetail.setUsername(user.getUsername());        customUserDetail.setPassword(user.getPasswd());        boolean enabled = !user.isDisabled();        customUserDetail.setEnabled(enabled);        customUserDetail.setAccountNonLocked(enabled);        customUserDetail.setAccountNonExpired(enabled);        customUserDetail.setCredentialsNonExpired(enabled);        Set<GrantedAuthority> authorities = Sets.newHashSet(new SimpleGrantedAuthority("ROLE_USER"));        if (user.isManager()) {            authorities.add(new SimpleGrantedAuthority("ROLE_ADMIN"));        }        customUserDetail.setAuthorities(authorities);        return customUserDetail;    }}